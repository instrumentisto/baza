name: CI

on:
  push:
    branches: ["main"]
    tags: ["baza-*"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1

jobs:

  ################
  # Pull Request #
  ################

  pr:
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - cargo-clippy
      - cargo-fmt
      - cargo-doc
      - cargo-test-unit
      - docker-build
      - docker-test-e2e
    runs-on: ubuntu-latest
    steps:
      - run: true




  ##########################
  # Linting and formatting #
  ##########################

  cargo-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      - run: make cargo.clippy

  cargo-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt

      - run: make cargo.fmt check=yes




  ###########
  # Testing #
  ###########

  cargo-test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      - run: make cargo.test.unit

  docker-test-e2e:
    name: E2E tests
    needs: ["docker-build"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}
      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: test-e2e-{hash}
          restore-keys: test-e2e-
        continue-on-error: true
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      - uses: actions/download-artifact@v3
        with:
          name: docker-baza-${{ github.run_number }}
      - run: make docker.untar

      - run: make docker.test.e2e start-app=yes \
                                  tag=build-${{ github.run_number }}




  ############
  # Building #
  ############

  cargo-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      - run: make cargo.doc open=no

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: docker-build-{hash}
          restore-keys: docker-build-
        continue-on-error: true
        timeout-minutes: 10
      - run: make docker.build tag=build-${{ github.run_number }}

      - run: make docker.tar tag=build-${{ github.run_number }}
      - uses: actions/upload-artifact@v3
        with:
          name: docker-baza-${{ github.run_number }}
          path: .cache/docker/image.tar
          retention-days: 1




  #############
  # Releasing #
  #############


  docker-release:
    needs: ["docker-build"]
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/baza-') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: ${{ matrix.if }}
      - uses: docker/setup-buildx-action@v2
        if: ${{ matrix.if }}

      - uses: actions/download-artifact@v3
        with:
          name: docker-baza-${{ github.run_number }}
      - run: make docker.untar

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse semver versions
        id: parsed
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.ref }}
          regex: '^refs/tags/baza[a-z-]*-((([0-9]+)\.[0-9]+)\.[0-9]+(-.+)?)$'
      - name: Form Docker version tags
        id: versions
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            let versions = '${{ steps.parsed.outputs.group1 }}';
            if ('${{ steps.parsed.outputs.group4 }}' === '') {
              versions += ',${{ steps.parsed.outputs.group2 }}';
              if ('${{ steps.parsed.outputs.group3 }}' !== '0') {
                versions += ',${{ steps.parsed.outputs.group3 }}';
              }
            }
            return versions;
      - name: Prepare final image tags
        id: tags
        uses: bluwy/substitute-string-action@v1
        with:
          _input-text: latest,@versions
          "@versions": ${{ steps.versions.outputs.result }}

      - run: make docker.tag tags=${{ steps.tags.outputs.result }}
                  of=build-${{ github.run_number }}
      - run: make docker.push tags=${{ steps.tags.outputs.result }}
